//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\ This library is a summary of the popular steps in many of the common libraries
//*\\ Compiled by Scott Walton & Josh Brewer, Hamilton Company
//*\\ Version 1.1 , Jan 2013
//*\\  
//*\\ Version1.1 - Jan 29th, 2013, -  1. enabled use of integers for site IDs,
//*\\                                 2. moved the strConvertToString and strConvertToString
//*\\                                    to beginning of list to use these functions in other 
//*\\                                    functions
//*\\                                 3. Added the CopySeq function
//*\\                                 4. Added the AlphaNumConversion function
//*\\
//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\




#ifndef __HSLAppsLib_hsl__
#define __HSLAppsLib_hsl__  1




//For the DeckVisualize step include:
#ifndef __HSLDeckVisualize_hsl__
	#include "HSLDeckVisualize.hsl"
#endif



namespace APPSLIB
{

//For the GetLabwareBarcode step include:
#ifndef __HSLLabwareStateLib_hsl__
	#include "HSLLabwareStateLibImpl.hs_"
#endif


//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//LIBRARY FUNCTIONS


// Function converts an integer or a float to to the corresponding string
   function StrConvertToString(variable& floatOrInteger) string
      {private variable varType;
       private string returnValue;

       varType = GetType(floatOrInteger);
       if (varType == "f")
           returnValue = FStr(floatOrInteger);
       else if (varType == "i")
           returnValue = IStr(floatOrInteger);
       else
           Trace("The variable ", floatOrInteger, " was not converted. It is not a float or integer.");
       return(returnValue);
      }


// Function converts a string into the float or integer value, depending on whether a "." is found
   function StrConvertToNumber(string& stringVariable) variable
      {private variable returnValue, varType, isFound;

       varType = GetType(stringVariable);
       if (varType == "s")
          {isFound = stringVariable.Find(".");
           if (isFound == -1)  //  stringVariable should be an integer
               returnValue = IVal(stringVariable);
           else                //  stringVariable should be a float
               returnValue = FVal(stringVariable);
          }
       else
          {Trace("The variable ", stringVariable, " cannot be converted. It is not a string.");
           returnValue = stringVariable;
          }
       return(returnValue);
      }


 // Function returns a string channel pattern - e.g. if tipUsed is 3, return "00100000", number of channels returned from dev library
   function ChannelPatternSingleTip(device& deviceObj, variable& tipUsed) variable
      {private string str_channelPattern;
       private variable loopNumber(1), numberOfChannels;

       numberOfChannels = deviceObj.GetCfgValueWithKey(1);
       if (GetType(tipUsed) == "s")
           tipUsed = IVal(tipUsed);       
       loop (numberOfChannels)
         {if (tipUsed == loopNumber) str_channelPattern = str_channelPattern + "1";
          else str_channelPattern = str_channelPattern + "0";
          loopNumber++;
         }

       Trace("Channel Pattern - Tip Used: ", tipUsed, ", number of channels: ", numberOfChannels, ", pattern returned: ", str_channelPattern);
       return(str_channelPattern);
      }


 // Function returns a string channel pattern - e.g. if tipsUsed is 3, return "11100000", number of channels reuturned from dev library
   function ChannelPatternMultipleTip(device& deviceObj, variable& tipsUsed) variable
      {private string str_channelPattern;
       private variable loopNumber(1), numberOfChannels;

       numberOfChannels = deviceObj.GetCfgValueWithKey(1);
       if (GetType(tipsUsed) == "s")
           tipsUsed = IVal(tipsUsed);  
       loop (numberOfChannels)
         {if (loopNumber <= tipsUsed) str_channelPattern = str_channelPattern + "1";
          else str_channelPattern = str_channelPattern + "0";
          loopNumber++;
         }
       Trace("Channel Pattern - Tips Used: ", tipsUsed, ", number of channels: ", numberOfChannels, ", pattern returned: ", str_channelPattern);
       return(str_channelPattern);
      }


// Function updates the loaded labware on the deck
   function UpdateLoadedLabware(device& deviceObj, variable labwareIDs[], variable labwareStates[]) void
      {private variable description("");
       DeckVisualize::UpdateLoadedLabware(deviceObj, labwareIDs, labwareStates, description);
      }


// Function Adds Labware to the deck based upon defined coordinates
   function DevAddLabware(device& deviceObj, variable& labwareId, variable& configFile, variable xCoord, variable yCoord, variable zCoord, variable angle) variable
      {private variable returnValue(0);
       private variable position[](4);

       position[0] = xCoord;
       position[1] = yCoord;
       position[2] = zCoord;
       position[3] = angle;
       returnValue = deviceObj.AddLabware(labwareId, configFile, position);
       return(returnValue);
      }


// Function adds labware to a specific site on a template
   function DevAddLabwareToTemplate(device& deviceObj, variable& labwareId, variable& configFile, variable& templateId, variable& siteId) variable
      {private variable returnValue(0);
       private string str_siteId;
       if (GetType(siteId) != "s")
           str_siteId = APPSLIB::StrConvertToString(siteId);
       else
           str_siteId = siteId;
       returnValue = deviceObj.AddLabwareToTemplate(labwareId, configFile, templateId, str_siteId);
       return(returnValue);
      }


// Function removes labware from the deck
   function DevRemoveLabware(device& deviceObj, variable& labwareId) variable
      {private variable returnValue(0);

       returnValue = deviceObj.RemoveLabware(labwareId);
       return(returnValue);
      }


// Function Gets the position of labware, position defined by the deck coordinates
   function DevGetLabwarePosition(device& deviceObj, variable& labwareId, variable& xCoord, variable& yCoord, variable& zCoord, variable& angle) variable
      {private variable returnValue(0);
       private variable position[];

       returnValue = deviceObj.GetLabwarePosition(labwareId, position);
       xCoord = position[0];
       yCoord = position[1];
       zCoord = position[2];
       angle =  position[3];
       return(returnValue);
      }


// Function Gets the position of labware's position ID, position defined by the deck coordinates
   function DevGetLabwarePositionEx(device& deviceObj, variable& labwareId, variable& positionId, variable& xCoord, variable& yCoord, variable& zCoord, variable& angle)variable
      {private variable returnValue(0), str_pos;
       private variable position[];

       if (GetType(positionId) != "s")
          {if (GetType(positionId) == "f")
              str_pos = FStr(positionId);
           else
              str_pos = IStr(positionId);
          }
       else
           str_pos = positionId;
       returnValue = deviceObj.GetLabwarePosition(labwareId, position, str_pos);
       xCoord = position[0];
       yCoord = position[1];
       zCoord = position[2];
       angle =  position[3];
       return(returnValue);
      }


// Function gets a barcode that has been set by a scanner or SetLabwareBarcode smart step (data handling step)
// Returns the labware barcode at the current position of a sequence, uses HSLLabwareStateLibImpl.hs_ included
   function GetLabwareBarcode(device& deviceObj, sequence& Sequence, variable& labwareLevel) variable
      {private variable barcode;

       barcode = HSLLabwState::GetLabwareBarcode(deviceObj, Sequence, labwareLevel);
       return (barcode);
      }


// Function rounds the float to the specified number of of digits passed the decimal place.  Zero returns integers
   function MathRound(variable& number, variable& numberOfDecimalPlaces) variable
      {private variable integerPortion(0.0);
	    private variable fractionalPortion(0.0);
	    private variable returnValue(0.0);

	    integerPortion = Floor(number, hslTrue);
	    fractionalPortion = number - integerPortion;
	    returnValue = integerPortion + Floor((10.0^numberOfDecimalPlaces) * fractionalPortion + 0.5) / (10.0^numberOfDecimalPlaces);
	    if (0 == numberOfDecimalPlaces)
		    return(Floor(returnValue));
       else
		    return(returnValue);
      }


// Function adds a new position to the end of the given sequence
   function SequenceAdd(sequence& sequenceObj, variable& labwareId, variable& positionId) void
      {sequenceObj.Add(labwareId, positionId);
      }


// Function brings a visual dialogs to graphically edit a sequence
   function SequenceEdit(sequence& seqObject,device deviceObj,variable title,variable prompt,variable timeout,variable initFromConfig, variable first, variable last, variable editable, variable cfgFile) void
      {seqObject.Edit(deviceObj, title, prompt, timeout, initFromConfig, first, last, editable, cfgFile);
      }


// Function gets the labware ID of the current position of the sequence
   function SequenceGetLabwareId(sequence& seqObject) variable
      {private variable returnValue;

       returnValue = seqObject.GetLabwareId();
       return(returnValue);
      }


// Function gets the position ID of the current position of the sequence
   function SequenceGetPositionId(sequence& seqObject) variable
      {private variable returnValue;

       returnValue = seqObject.GetPositionId();
       return(returnValue);
      }


// Function copies a plate pattern
   function CopyPlatePatternToPlate (sequence sourcePlate, sequence& targetPlate) void
      {private variable labwareId, position, total, loopNum;
       sourcePlate.SetCurrentPosition(1);
       targetPlate.SetCurrentPosition(1);
       labwareId = targetPlate.GetLabwareId();

       //Remove All positions from the targetPlate sequence
       total = targetPlate.GetTotal();
	    targetPlate.SetCount(total);
	    targetPlate.SetCurrentPosition(1);
	    for (position = total; 0 < position; position--)
		      targetPlate.RemoveAt(position);
	    targetPlate.SetCount(0);
	    targetPlate.SetCurrentPosition(0);
	    targetPlate.SetMax(0);

       // loop over the source sequence and copy the positions to the target plate sequence
       for (loopNum=1 ; loopNum <= sourcePlate.GetTotal() ; loopNum++)
            {targetPlate.Add(labwareId, targetPlate.GetPositionId());
             sourcePlate.Increment(1);
            }
       targetPlate.SetCurrentPosition(1);
      }


// Function gets the total positions in the sequence
   function SequenceGetTotal(sequence& seqObject) variable
      {private variable returnValue;

       returnValue = seqObject.GetTotal();
       return(returnValue);
      }


// Function gets the number of positions in the sequence, if an end position is set
//   that is before the last position, then this number will be less the the GetTotal number of positions
   function SequenceGetCount(sequence& seqObject) variable
      {private variable returnValue;

       returnValue = seqObject.GetCount();
       return(returnValue);
      }


// Function gets the remaining positions left in the sequence
   function SequenceTotalPosRemaining(sequence& seqObject) variable
      {private variable returnValue;

       if ((seqObject.GetCount() == 0) && (seqObject.GetCurrentPosition() == 0)) // no positions in the sequence
          returnValue = 0;
       else
          returnValue = (seqObject.GetCount() - seqObject.GetCurrentPosition()) + 1;
       return(returnValue);
      }


// Function increments a sequence by the amount requested
   function SequenceIncrement(sequence& seqObject, variable increment) void
      {seqObject.Increment(increment);
      }


// Function removes all positions from a sequence, after re-adding positions to the sequence sequence must be set to 1 again or error occrus
   function SequenceRemoveAll(sequence& seqObject) void
      {private variable position, total;

	    total = seqObject.GetTotal();
	    seqObject.SetCount(total);
	    seqObject.SetCurrentPosition(1);
	    for (position = total; 0 < position; position--)
		    seqObject.RemoveAt(position);
	    seqObject.SetCount(0);
	    seqObject.SetCurrentPosition(0);
	    seqObject.SetMax(0);
      }


// Function removes a sequence position at the requested position
   function SequenceRemoveAt(sequence& seqObject, position) void
      {variable int;
       if (GetType(position) == "f")
          {int = APPSLIB::MathRound(position, 0);
           seqObject.RemoveAt(int);
          }
       else if (GetType(position) == "s")
           seqObject.RemoveAt(IVal(position));
       else
           seqObject.RemoveAt(position);
      }


// Function overwrites a target sequence with the contents of the source sequence
function SequenceCopySeq(sequence& targetSequence, sequence& sourceSequence) void
{
	targetSequence.CopySequence(sourceSequence);
}


// Function concatenates the strings and returns the caoncatenated string, if non-string values are given, then convert them into strings
   function StrConcatenate(variable var1, variable var2, variable var3, variable var4, variable var5, variable var6, variable var7, variable var8) variable
      {private variable loopNum, varType, varPos;
       private string returnValue, str_var;
       private variable varArray[](8);

       varArray[0] = var1; varArray[1] = var2; varArray[2] = var3; varArray[3] = var4;
       varArray[4] = var5; varArray[5] = var6; varArray[6] = var7; varArray[7] = var8;
       for (loopNum=0; loopNum < varArray.GetSize(); loopNum++)
         {varType = GetType(varArray[loopNum]);
          varPos = varArray[loopNum];
          if (varType == "f")
             {str_var = FStr(varPos);
              returnValue = returnValue + str_var;
             }
          else if (varType == "i")
             {str_var = IStr(varPos);
              returnValue = returnValue + str_var;
             }
          else if (varType == "s")
             returnValue = returnValue + varPos;
         }
       return(returnValue);
      }


// Function Finds a substring within a string, returnValue is 1 based
   function StringFind(variable& strObject, variable& subStrToFind) variable
      {private variable returnValue;
       private string str_strObject, str_subStrToFind;
       
       if (GetType(strObject) !="s")
           str_strObject = APPSLIB::StrConvertToString(strObject);
       else
           str_strObject = strObject;
       if (GetType(subStrToFind) !="s")
           str_subStrToFind = APPSLIB::StrConvertToString(subStrToFind);
       else
           str_subStrToFind = subStrToFind;
       returnValue = str_strObject.Find(str_subStrToFind);
       returnValue++;
       return(returnValue);
      }


// Function returns a number leftmost characters of a string
   function StringLeft(variable& strObject, variable& numberOfChar) variable
      {private variable returnValue;
       private string str_strObject;

       if (GetType(strObject) != "s")
           str_strObject = APPSLIB::StrConvertToString(strObject);
       else
           str_strObject = strObject;
       if (GetType(numberOfChar) == "s")
          {numberOfChar = APPSLIB::StrConvertToNumber(numberOfChar);
           if (GetType(numberOfChar) == "f")
               numberOfChar = APPSLIB::MathRound(numberOfChar, 0);
          }
       returnValue = str_strObject.Left(numberOfChar);
       return(returnValue);
      }


// Function returns a number of rightmost characters of a string
   function StringRight(variable& strObject, variable& numberOfChar) variable
      {private variable returnValue;
       private string str_strObject;

       if (GetType(strObject) != "s")
           str_strObject = APPSLIB::StrConvertToString(strObject);
       else
           str_strObject = strObject;
       if (GetType(numberOfChar) == "s")
          {numberOfChar = APPSLIB::StrConvertToNumber(numberOfChar);
           if (GetType(numberOfChar) == "f")
               numberOfChar = APPSLIB::MathRound(numberOfChar, 0);
          }
       returnValue = str_strObject.Right(numberOfChar);
       return(returnValue);
      }


// Function returns the length of a string
   function StringGetLength(variable& strObject) variable
      {private variable returnValue;
       private string str_strObject;
       
       if (GetType(strObject) != "s")
           str_strObject = APPSLIB::StrConvertToString(strObject);
       else
           str_strObject = strObject;
       returnValue = str_strObject.GetLength();
       return(returnValue);
      }


// Function returns a string within a given string, position should be 1 based
   function StringMid(variable& strObject,variable& startPosition, variable& numberOfChar) variable
      {private variable returnValue;
       private string str_strObject;

       if (GetType(strObject) != "s")
           str_strObject = APPSLIB::StrConvertToString(strObject);
       else
           str_strObject = strObject;
       if (GetType(startPosition) == "s")
          {startPosition = APPSLIB::StrConvertToNumber(startPosition);
           if (GetType(startPosition) == "f")
               startPosition = APPSLIB::MathRound(startPosition, 0);
          }
       if (GetType(numberOfChar) == "s")
          {numberOfChar = APPSLIB::StrConvertToNumber(numberOfChar);
           if (GetType(numberOfChar) == "f")
               numberOfChar = APPSLIB::MathRound(numberOfChar, 0);
          }
       startPosition--;
       returnValue = str_strObject.Mid(startPosition, numberOfChar);
       return(returnValue);
      }

// Function Looks up a value within an array (position is 1 based), returns hslTrue if found - else hslFalse
   function ArrayLookup(variable& arrayToSearch[], variable& valueSearchedFor, variable& positionInArray) variable
      {private variable returnValue(hslFalse), loopNum, value;

       for(loopNum=0 ; loopNum < arrayToSearch.GetSize() ; loopNum++)
          {value = arrayToSearch[loopNum];
           if (value == valueSearchedFor)   //Value was found
              {positionInArray = loopNum + 1;  // value returned is 1 based
               returnValue = hslTrue;
               break;
              }
          }
       return(returnValue);
      }


// Function will shift the labware of the current position in the sequence
   function MoveSequence(device& deviceObj, sequence& Sequence, variable& xDelta, variable yDelta, variable zDelta) void
      {private variable labID;
	    object editLabware;
		 object deckLayout;
		 object labware;

		 labID = Sequence.GetLabwareId();
       deckLayout = deviceObj.GetDeckLayoutObject(); // Get a HxLabwr3 object type decklayout
		 if(!deckLayout.IsNull())
         {labware = deckLayout.Labware(labID);
		    if(!labware.IsNull())
            {labware.GetObject2("{39A3639F-97AB-444D-86D3-253122BD2202}", editLabware); // get IEditLabware5
				 editLabware.MoveDelta(xDelta, yDelta, zDelta);
			   }
          else
			    Trace("Warning, labware is null");
         }
       else
		    Trace("Warning Deck Layout is null");
      }


// Function will shift the labware based upon the LabwareID
   function MoveLabware(device& deviceObj, variable& labwareId, variable& xDelta, variable yDelta, variable zDelta) void
      {private variable labID;
	    object editLabware;
		 object deckLayout;
		 object labware;

       deckLayout = deviceObj.GetDeckLayoutObject(); // Get a HxLabwr3 object type decklayout
		 if(!deckLayout.IsNull())
         {labware = deckLayout.Labware(labwareId);
		    if(!labware.IsNull())
            {labware.GetObject2("{39A3639F-97AB-444D-86D3-253122BD2202}", editLabware); // get IEditLabware5
				 editLabware.MoveDelta(xDelta, yDelta, zDelta);
			   }
          else
			    Trace("Warning, labware is null");
         }
       else
		    Trace("Warning Deck Layout is null");
      }



// Function will send values to the trace file
   function TraceValues(variable value1, variable value2, variable value3, variable value4, variable value5, variable value6, variable value7, variable value8) void
      {Trace(value1, value2, value3, value4, value5, value6, value7, value8);
      }


// Function will send a sequence to the trace file
   function TraceSequence(sequence& seqObject) void
      {private variable loopNum, currentPosition;

       currentPosition = seqObject.GetCurrentPosition();
       Trace("Trace sequence ", seqObject.GetName(), "  -  total positions: ", seqObject.GetTotal(), ", current position: ", currentPosition, ", end position: ", seqObject.GetCount());
       
       for (loopNum=1 ; loopNum <= seqObject.GetTotal() ; loopNum++)
           {Trace("Position ", loopNum, "    labwareId: ", seqObject.GetLabwareId(), "    positionId: ", seqObject.GetPositionId());
            seqObject.Increment(1);
           }
       seqObject.SetCurrentPosition(currentPosition);
      }


// Function will trace out 1 array
   function TraceArray(variable& description, variable& array1[]) void
      {private variable loopNum, position;
       
       Trace("Trace array. ", description);
       for (loopNum=0 ; loopNum<array1.GetSize() ; loopNum++)
           {position = loopNum + 1;    //  Values traces with show up as 1 based
            Trace("Position ", position, ": ", array1[loopNum]);
           }
      }


// Function will trace out 2 arrays
   function TraceArray2(variable& description, variable& array1[], variable& array2[]) void
      {private variable loopNum, position;
       
       Trace("Trace array. ", description);
       if (array1.GetSize() == array2.GetSize())
          {for (loopNum=0 ; loopNum<array1.GetSize() ; loopNum++)
               {position = loopNum + 1;    //  Values traces with show up as 1 based
                Trace("Position ", position, ": ", array1[loopNum], "     ", array2[loopNum]);
               }
          }
       else
          Trace("Arrays cannot be traced together.  Arrays have different sizes. Array1 size: ", array1.GetSize(), ",  Array2 size: ", array2.GetSize());
      }


// Function will trace out 3 arrays
   function TraceArray3(variable& description, variable& array1[], variable& array2[], variable& array3[]) void
      {private variable loopNum, position;
       
       Trace("Trace array. ", description);
       if ((array1.GetSize() == array2.GetSize())&&(array1.GetSize() == array3.GetSize()))
          {for (loopNum=0 ; loopNum<array1.GetSize() ; loopNum++)
               {position = loopNum + 1;    //  Values traces with show up as 1 based
                Trace("Position ", position, ": ", array1[loopNum], "     ", array2[loopNum], "     ", array3[loopNum]);
               }
          }
       else
          Trace("Arrays cannot be traced together.  Arrays have different sizes. Array1 size: ", array1.GetSize(), ",  Array2 size: ", array2.GetSize(), ",  Array3 size: ", array3.GetSize());
      }


// Function will trace out 4 arrays
   function TraceArray4(variable& description, variable& array1[], variable& array2[], variable& array3[], variable& array4[]) void
      {private variable loopNum, position;
       
       Trace("Trace array. ", description);
       if ((array1.GetSize() == array2.GetSize())&&(array1.GetSize() == array3.GetSize())&&(array1.GetSize() == array4.GetSize()))
          {for (loopNum=0 ; loopNum<array1.GetSize() ; loopNum++)
               {position = loopNum + 1;    //  Values traces with show up as 1 based
                Trace("Position ", position, ": ", array1[loopNum], "     ", array2[loopNum], "     ", array3[loopNum], "     ", array4[loopNum]);
               }
          }
       else
          Trace("Arrays cannot be traced together.  Arrays have different sizes. Array1 size: ", array1.GetSize(), ",  Array2 size: ", array2.GetSize(), ",  Array3 size: ", array3.GetSize(), ",  Array4 size: ", array4.GetSize());
      }


// Function converts an xlsx file to xls.  Windows 2007 or higher must be installed on the system.
   function ConvertXLSX_to_XLS(variable& path_sourceFile, variable& path_newFile) void
      {object app, workbook, workbook_src;

       app.CreateObject("Excel.Application");
       workbook = app.Workbooks();
       workbook_src = workbook.Open(path_sourceFile);
       app.DisplayAlerts = hslFalse;
       app.Visible = hslFalse;
       workbook_src.SaveAs(path_newFile, 56);
       workbook_src.Close;
      }


// Function converts an xls file to xlsx.  Windows 2007 or higher must be installed on the system.
   function ConvertXLS_to_XLSX(variable& path_sourceFile, variable& path_newFile) void
      {object app, workbook, workbook_src;

       app.CreateObject("Excel.Application");
       workbook = app.Workbooks();
       workbook_src = workbook.Open(path_sourceFile);
       app.DisplayAlerts = hslFalse;
       app.Visible = hslFalse;
       workbook_src.SaveAs(path_newFile, 51);
       workbook_src.Close;
      }


// Function converts an AlphaNum to an Integer or an Integer to AlphaNum 
//  e.g. Convert 15 to G2 (96 well plate format)
   function AlphaNumConversion(variable& convIndex, variable& posNum, variable& plateFormat) variable
      {private variable returnValue, int_convIndex, int_posNum, int_column, int_row, str_row, int_plateFormat, divisor;
       private string str_posNum;
       

       // First convert it to an integer in case the user enters a string
       if (GetType(convIndex) == "s")
           int_convIndex = APPSLIB::StrConvertToNumber(convIndex);
       else
           int_convIndex = convIndex;

       // Convert the plateFormat variable type to integer (it should be either 96, 384 or 1536)
       if (GetType(plateFormat) == "s")
           int_plateFormat = APPSLIB::StrConvertToNumber(plateFormat);
       else
           int_plateFormat = plateFormat;

       // Get the correct divisor based upon the plate format
       if (int_plateFormat == 96)
           divisor = 8;
       else if (int_plateFormat == 384)
           divisor = 16;
       else if (int_plateFormat == 1536)
           divisor = 32;
       else
           {Trace("Error - The correct plate type 96, 384, or 1536 was not used. ", plateFormat, " is not a valid input.  The AlphaNumConversion failed.");
            convIndex = -1;
           }

       if (convIndex == 0) // Then convert a numeric position to a string (e.g. 7 to "G1")
          {
           // Convert the posNum variable to type integer if they mistakenly used a string
           if (GetType(posNum) == "s")
              {Trace("Variable type detected for variable: ", posNum, " type ", GetType(posNum), ". Attempting to convert to type i.");
               int_posNum = APPSLIB::StrConvertToNumber(posNum);
              }
           else
               int_posNum = posNum;
                     
           int_column = (int_posNum - ((int_posNum-1) % divisor) - 1);
           int_column = (int_column / divisor) + 1;
           int_row = (((int_posNum-1) % divisor) + 1) + 64;
           str_row = StrAsciiToStr(int_row);
           returnValue = str_row + IStr(int_column);

           return (returnValue);
          }
       else if (convIndex == 1) // Then conver a string position to a number (e.g. "G1" to 7)
          {
           // If the posNum is not a string, don't try to convert, just send error to Trace
           if (GetType(posNum) == "s")
              {str_posNum = posNum;
               int_row = StrStrToAscii(str_posNum.Left(1)) - 64;
               int_column = IVal(str_posNum.Mid(1, str_posNum.GetLength() - 1));
               returnValue = ((int_column - 1) * divisor) + int_row;
               return (returnValue);
              }
           else
               Trace("Error - the variable ", posNum, " of type ", GetType(posNum), " cannot be converted to a numeric value.  Use a valid string.");
          }
       else
           Trace("Error - invalid variable used for AlphaNumConversion step in Apps library. Variable convIndex contains: ", convIndex);
      }


//End the namespace
}


//For the GetSerialNumber step include:
#ifndef __HSLStrLib_hsl__
	#include "HSLStrLib.hsl"
#endif


// Gets the serial number from the instrument (instrument must be initialized)
function GetSerialNumber(device& ML_STAR) variable
{
	variable command("");								// Command string
	variable parameter("");								// Parameter string
	variable serialNumber("");							// Serial number
	variable rc[];											// Low level step return values

	// Get serial number
	command = "C0RI";				// Request Installation data
	parameter = "";
	rc = ML_STAR.FirmwareCommand( "1e78330b_4cb4_456b_84d80d3b33e97e73" );
	if (4 == rc.GetSize())
   {
		serialNumber = StrMid(rc.ElementAt(3), StrFind(rc.ElementAt(3), "sn"), 6);
   }
	return(StrMakeUpper(serialNumber));
}



#endif
// $$author=Josh Brewer$$valid=0$$time=2013-06-12 14:08$$checksum=24c9bda3$$length=090$$