// ======================================================================
// This is a part of the HSL BarcodeReader Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
// ======================================================================
//
// Modification History
//		2002-05-24	 fbrehm		:	Remove PVCS header
//		2002-06-25   ubernhard	:	SCR#155: corrected bug in function Read()
//														(Case: manuall input of Barcode;
//														 leaving the dialog with Cancel returns 
//														 now an empty String)
//		2005-11-30	 ubernhard	:	SCR#1118: make library schedulable
//		2007-09-17	 ubernhard	:	Support of simulation flag
//											Add new interface function SetSimulation()
// 
// ======================================================================

#ifndef __HSLBarcodeReaderImpl_hsl__
#define __HSLBarcodeReaderImpl_hsl__	1

// includes
#ifndef __HSLStrLib_hsl__
#include "HSLStrLib.hsl"
#endif

// debug switch
//#define _DEBUG 								1

// ======================================================================
// Implementation of HSLBarcodeReader library 
// ======================================================================

namespace HSLBarcodeReader
{
	#ifndef __HSLStringTableLib_hsl__
	#include "HSLStringTableLib.hs_"
	#endif

	namespace errorID
	{
		static const variable first(0);											// guard
		static const variable noError(first);									// No error
		static const variable fatalError(first + 1);							// General unspecific error
		static const variable readError(first + 2);							// Read error
		static const variable last(first + 2);									// guard
	}

	namespace stringID
	{
		static const variable first(errorID::last + 1);						// guard
		static const variable userPrompt(first);								// User prompt for input barcode
		static const variable helpFileName(first + 1);						// Name of helpfile
		static const variable inputBoxTitel(first + 2);						// Titel of barode input-box
		static const variable messageBoxTitel(first + 3);					// Titel of read error message-box
		static const variable traceSource(first + 4);						// source for formated trace
		static const variable traceActionSetComPort(first + 5);			// action for formated trace
		static const variable traceActionSetTimeout(first + 6);			// action for formated trace
		static const variable traceActionSetErrorRecovery(first + 7);	// action for formated trace
		static const variable traceActionRead(first + 8);					// action for formated trace
		static const variable traceActionDeleteComBuffer(first + 9);	// action for formated trace
		static const variable traceActionSetSimulation(first + 10);		// action for formated trace

		static const variable traceAdditionalSetComPort(first + 11);	// com port used
		static const variable traceAdditionalSetTimeout(first + 12);	// timeout set
		static const variable traceAdditionalSetTimeoutInfinite(first + 13);	// timeout set
		static const variable traceAdditionalSetErrorRecovery_0(first + 14);
		static const variable traceAdditionalSetErrorRecovery_1(first + 15);
		static const variable traceAdditionalSetErrorRecovery_2(first + 16);
		static const variable traceAdditionalRead(first + 17);
		static const variable traceAdditionalSetSimulation(first + 18);
		static const variable traceTextOn(first + 19);
		static const variable traceTextOff(first + 20);

		static const variable traceErrorInvalidDatatype(first + 21);	// error for formated trace
		static const variable traceErrorInvalidComPort(first + 22);		// error for formated trace
		static const variable traceErrorInvalidArgument(first + 23);	// error for formated trace
		static const variable traceErrorReadError(first + 24);			// error for formated trace
		static const variable traceRecManEnteredBC(first + 25);			// description of error recovery done
		static const variable traceRecCancelPressed(first + 26);			// description of error recovery done
		static const variable last(first + 26);								// guard
	}

	// --------------------------------------------------------------------------------------
	// Global data
	// --------------------------------------------------------------------------------------

	global variable mg_barcode("");
	global variable mg_baudRate(0);
	global variable mg_comPort("");
	global variable mg_comSetting;
	global variable mg_errRecovery(1);
	global file mg_port;
	global variable mg_isSimulation(hslFalse);
	global variable mg_readTimeout(10);				// default 10 seconds

	// --------------------------------------------------------------------------------------
	// Exception Handling
	// --------------------------------------------------------------------------------------

	namespace Error
	{
		static function Raise(														// raises a runtime error
			variable errorId,															// [in] error id, one of IDE
			variable& fileName,														// [in] file name
			variable& funcName,														// [in] function name
			variable& lineNumber)													// [in] line number
		{
			variable description("");

			// set error description
			description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId);
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(stringID::helpFileName));
		}

		function RaiseEx(																// raises a runtime error
			variable errorId,															// [in] error id, one of IDE
			variable errorDesc,														// [in] error description
			variable& fileName,														// [in] file name
			variable& funcName,														// [in] function name
			variable& lineNumber)													// [in] line number
		{
			variable description("");

			// set error description
			if ("" == funcName)
				description = fileName + "(" + lineNumber + ") : " + errorDesc;
			else
				description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + errorDesc;
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(stringID::helpFileName));
		}

		function RaiseLast()															// re-throws the last runtime error
		{
			// re-raise error
			err.Raise();
		}
	}

	// --------------------------------------------------------------------------------------
	// Library Initialization
	// --------------------------------------------------------------------------------------

	static variable initializedLib(hslFalse);		// initialization state of the HxBarcodeReader library

	static function InitBarcodeReaderLibrary();	// initializes the HxBarcodeReader library (only once)

	static function InitBarcodeReaderLibrary()
	{
		// initialize the HxBarcodeReaderlibrary once only
		if(!initializedLib)
		{
			StringTable::Init("HSLBarcodeReaderStringTable");

			#ifdef _DEBUG
				StringTable::Dump();
			#endif
			
			initializedLib = hslTrue;
		}
		return(initializedLib);
	}

	// --------------------------------------------------------------------------------------
	// Prototypes of internal functions
	// --------------------------------------------------------------------------------------

	static function checkConsistency();	// check, if settings have been initialized
	static function setDefaultValues();	// Set com settings to default values
	static function openPort();			// open port with given settings
	static function isString(				// returns true if the variable value is a string
			variable var);						// i: variable
	static function isNumber(				// returns true if the variable value is a number
			variable var);						// i: variable

	// --------------------------------------------------------------------------------------
	// Set Simulation
	// --------------------------------------------------------------------------------------

	function SetSimulation(variable simulate) variable
	{
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace
		variable traceEx;									// additional info for formated trace

		// initialize barcode reader library
		InitBarcodeReaderLibrary();

		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionSetSimulation);

		// Trace start of SetSimulation	
		FormatTrace(traceSource, traceAction, 1);

		// Check variable comPort
		if(!isNumber(simulate))
		{
			traceError = StringTable::Load(stringID::traceErrorInvalidDatatype);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(1);	//invalid datatype 
		}
	
		mg_isSimulation = hslFalse;
		
		if(simulate != 0)
			mg_isSimulation = hslTrue;
	
		// Trace completion of SetSimulation
		traceEx = StringTable::Load(stringID::traceAdditionalSetSimulation);
		if(mg_isSimulation)
			StrReplace(traceEx, "%s", StringTable::Load(stringID::traceTextOn));
		else
			StrReplace(traceEx, "%s", StringTable::Load(stringID::traceTextOff));
		
		FormatTrace(traceSource, traceAction, 2, traceEx); 

		return(0);
	}	// end of SetSimulation()


	// --------------------------------------------------------------------------------------
	// Set COM port
	// --------------------------------------------------------------------------------------

	function SetComPort(variable& comPort)
	{
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace
		variable traceEx;									// additional info for formated trace

		// initialize barcode reader library
		InitBarcodeReaderLibrary();
	
		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionSetComPort);

		// Trace start of SetComPort	
		FormatTrace(traceSource, traceAction, 1);

		// Check variable comPort
		if (isNumber(comPort))
		{
			traceError = StringTable::Load(stringID::traceErrorInvalidDatatype);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(2);	//invalid datatype 
		}
	
		if ((comPort != "COM1") && (comPort != "COM2") && (comPort != "COM3") &&
			 (comPort != "COM4") && (comPort == "LPT1") || (comPort == "LPT2"))
		{
			traceError = StringTable::Load(stringID::traceErrorInvalidComPort);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(1);	//invalid comPort
		}

		mg_comPort = comPort;	
	
		// Trace completion of SetComPort	
		traceEx = StringTable::Load(stringID::traceAdditionalSetComPort);
		StrReplace(traceEx, "%s", mg_comPort);
		FormatTrace(traceSource, traceAction, 2, traceEx); 
	
		return(0);
	}	// end of SetComPort()


	// --------------------------------------------------------------------------------------
	// Set Timeout
	// --------------------------------------------------------------------------------------

	function SetTimeout(variable timeout) 
	{	
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace
		variable traceEx;									// additional info for formated trace
		variable ReadTotalTimeoutConstant;

		// initialize barcode reader library
		InitBarcodeReaderLibrary();

		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionSetTimeout);

		// Trace start of SetTimeout	
		FormatTrace(traceSource, traceAction, 1); 

		// check variable timeout
		if (!isNumber(timeout))
		{	
			traceError = StringTable::Load(stringID::traceErrorInvalidDatatype);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(1);	//invalid datatype
		}

		if (timeout < 1 && timeout != -1)
		{	
			traceError = StringTable::Load(stringID::traceErrorInvalidArgument);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(2);	//invalid argument
		}

		if (timeout == -1)
		{
			timeout = hslInfinite;
			traceEx = StringTable::Load(stringID::traceAdditionalSetTimeoutInfinite);
		}
		else
		{
			traceEx = StringTable::Load(stringID::traceAdditionalSetTimeout);
			StrReplace(traceEx, "%s", IStr(timeout));
		}
	
		mg_readTimeout = timeout;
	
		if(( GetSimulationMode() == 1 ) || mg_isSimulation)
		{
			// Trace completion of SetTimeout
			FormatTrace(traceSource, traceAction, 2, traceEx);
			return(0);
		}

		checkConsistency();

		ReadTotalTimeoutConstant = mg_readTimeout;
		SetCommTimeouts(mg_port);

		// Trace completion of SetTimeout
		FormatTrace(traceSource, traceAction, 2, traceEx);
	
		return(0);
	}  // end of SetTimeout()


	// --------------------------------------------------------------------------------------
	// Delete communication input buffer
	// --------------------------------------------------------------------------------------

	function DelComBuffer()
	{
		variable ReadTotalTimeoutConstant;
		variable rr(1);
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace

		// initialize barcode reader library
		InitBarcodeReaderLibrary();

		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionDeleteComBuffer);

		// Trace start of DelComBuffer	
		FormatTrace(traceSource, traceAction, 1); 

		if(( GetSimulationMode() == 1 ) || mg_isSimulation)
		{
			// Trace completion of DelComBuffer
			FormatTrace(traceSource, traceAction, 2);
			return(0);
		}

		checkConsistency();
	
		// Read Record until input buffer is empty
		ReadTotalTimeoutConstant = 0.1;
		SetCommTimeouts(mg_port);

		onerror goto Unexpected;
		while(rr != 0 || mg_port.Eof())
		{
			rr = mg_port.ReadRecord();
		}
		onerror goto 0;

		ReadTotalTimeoutConstant = mg_readTimeout;
		SetCommTimeouts(mg_port);

		// Trace completion of DelComBuffer
		FormatTrace(traceSource, traceAction, 2);

		return(0);

		Unexpected:
		{	
			// do nothing --> assume the Com Port is not open
			err.Clear();
			resume next;
		}
	}	// end of DelComBuffer()


	// --------------------------------------------------------------------------------------
	// Read barcode from scanner
	// --------------------------------------------------------------------------------------

	function Read()
	{
		variable rr;										// returnvalue of ReadRecord
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace
		variable traceEx;									// additional info for formated trace

		// initialize barcode reader library
		InitBarcodeReaderLibrary();

		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionRead);

		// Trace start of Read
		FormatTrace(traceSource, traceAction, 1); 

		mg_barcode = "";

		if(( GetSimulationMode() == 1 ) || mg_isSimulation)
		{
			mg_barcode = "BC123456";

			// Trace completion of Read
			traceEx = StringTable::Load(stringID::traceAdditionalRead);
			StrReplace(traceEx, "%s", mg_barcode);
			FormatTrace(traceSource, traceAction, 2, traceEx); 

			return(mg_barcode);
		}

		checkConsistency();

		onerror goto Unexpected;
		rr = mg_port.ReadRecord();
		onerror goto 0;

		// show Error message
		if(0 == rr && 0 == mg_errRecovery)
		{	
			traceError = StringTable::Load(stringID::traceErrorReadError);
			FormatTrace(traceSource, traceAction, 3, traceError); 
			MessageBox(StringTable::Load(errorID::readError),
							StringTable::Load(stringID::messageBoxTitel),
							hslError);
			FormatTrace(traceSource, traceAction, 5);		
			return(mg_barcode);
		}

		// show Input box for manual input of barcode
		if(0 == rr && 1 == mg_errRecovery)
		{
			variable inputBarcode;
			string traceRecovery;
			string userName;
		
			// get name of current logged in user
			userName = GetUserName();

			traceError = StringTable::Load(stringID::traceErrorReadError);
			FormatTrace(traceSource, traceAction, 3, traceError); 
			inputBarcode = InputBox(StringTable::Load(stringID::userPrompt),
											StringTable::Load(stringID::inputBoxTitel),
											hslString);		
		
			if(isString(inputBarcode))
			{
				mg_barcode = inputBarcode;
				
				traceRecovery = StringTable::Load(stringID::traceRecManEnteredBC);
				StrReplace(traceRecovery, "%s1", mg_barcode);
				StrReplace(traceRecovery, "%s2", userName);
				FormatTrace(traceSource, traceAction, 2, traceRecovery);
			}
			else // Input Dialog leaved with Cancel
			{
				mg_barcode = "";

				traceRecovery = StringTable::Load(stringID::traceRecCancelPressed);
				StrReplace(traceRecovery, "%s", userName);
				FormatTrace(traceSource, traceAction, 2, traceRecovery);		
			}

			return(mg_barcode);
		}

		// return empty String
		if(0 == rr && 2 == mg_errRecovery)
		{
			traceError = StringTable::Load(stringID::traceErrorReadError);
			FormatTrace(traceSource, traceAction, 3, traceError); 
			FormatTrace(traceSource, traceAction, 5);		
			return(mg_barcode);
		}

		// Trace completion of Read
		traceEx = StringTable::Load(stringID::traceAdditionalRead);
		StrReplace(traceEx, "%s", mg_barcode);
		FormatTrace(traceSource, traceAction, 2, traceEx); 

		return(mg_barcode);

		Unexpected:
		{	
			variable errorDesc("");
			errorDesc = StringTable::Load(errorID::readError);
			Error::RaiseEx(errorID::readError, errorDesc, GetFileName(), GetFunctionName(), GetLineNumber());
		}
	}	// end of Read()


	// --------------------------------------------------------------------------------------
	// Set Error recovery
	// --------------------------------------------------------------------------------------

	function SetErrorRecovery(variable errRecovery)
	{	
		variable traceSource;							// source for formated trace
		variable traceAction;							// action for formated trace
		variable traceError;								// error for formated trace
		variable traceEx;									// additional info for formated trace

		// initialize barcode reader library
		InitBarcodeReaderLibrary();

		traceSource = StringTable::Load(stringID::traceSource);
		traceAction = StringTable::Load(stringID::traceActionSetErrorRecovery);

		// Trace start of SetErrorRecovery
		FormatTrace(traceSource, traceAction, 1); 
	
		// check datatype
		if (!isNumber(errRecovery))
		{	
			traceError = StringTable::Load(stringID::traceErrorInvalidDatatype);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(1);	// invalid datatype
		}

		// check if is valid value (0, 1 or 2 are valid values)
		if (0 > errRecovery || 2 < errRecovery)
		{	
			traceError = StringTable::Load(stringID::traceErrorInvalidArgument);
			FormatTrace(traceSource, traceAction, 5, traceError); 
			return(2);	// invalid argument
		}

		mg_errRecovery = errRecovery;

		// Trace completion of Read
		if(mg_errRecovery == 0)
			traceEx = StringTable::Load(stringID::traceAdditionalSetErrorRecovery_0);
		else if(mg_errRecovery == 1)
			traceEx = StringTable::Load(stringID::traceAdditionalSetErrorRecovery_1);
		else if(mg_errRecovery == 2)
			traceEx = StringTable::Load(stringID::traceAdditionalSetErrorRecovery_2);

		FormatTrace(traceSource, traceAction, 2, traceEx); 

		return(0);
	}


	// --------------------------------------------------------------------------------------
	// Internal functions
	// --------------------------------------------------------------------------------------

	// check, if all variables have a value
	static function checkConsistency()
	{
		if (mg_baudRate == 0 )
			setDefaultValues();

		return(0);
	}

	// set variable default values
	static function setDefaultValues()
	{
		mg_baudRate = 9600;
		
		if(( GetSimulationMode() == 1 ) || mg_isSimulation)
			mg_baudRate = 0;
	
		if (mg_comPort == "")
			mg_comPort = "COM2";
	
		mg_comSetting = "S,7,1,RTS/CTS,CR/LF";

		// Set delimiters and record fields
		mg_port.SetDelimiter(hslAsciiText);
		if (0 == mg_port.AddField(1, mg_barcode, hslString))
			 Error::Raise(errorID::fatalError, GetFileName(), GetFunctionName(), GetLineNumber());

		openPort();
		return(0);
	}

	// Open com port
	static function openPort()
	{
		variable errCode;
		variable argument;
		variable ReadTotalTimeoutConstant(mg_readTimeout);

		if(( GetSimulationMode() == 1 ) || mg_isSimulation)
			return(0);

		mg_port.Close();
		
		argument = mg_comPort + " " + IStr(mg_baudRate) + "," + mg_comSetting;
	
		#ifdef _DEBUG
			Trace("OpenPort: ", argument);
			Trace("ReadTotalTimeoutConstant: ", ReadTotalTimeoutConstant);
		#endif

		onerror goto Unexpected;
		mg_port.Open(argument, hslWrite);
		SetCommTimeouts(mg_port);
		onerror goto 0;

		return(0);

		Unexpected:
		{	
			 Error::Raise(errorID::fatalError, GetFileName(), GetFunctionName(), GetLineNumber());
		}
	}

	// Check, if variable is string
	static function isString(variable var)
	{
		return(hslString.Compare(GetType(var)) == 0);
	}

	// Check if variable is a number
	static function isNumber(variable var)
	{
		return(hslString.Compare(GetType(var)) != 0);
	}

} // end of name space HSLBarcodeReader

#endif  // end of '#ifndef __HSLBarcodeReaderImpl_hsl__'
// $$author=wbarmettler$$valid=1$$time=2013-06-24 11:47$$checksum=093404a7$$length=090$$