// ======================================================================
// This is the language dependant part of the BarcodeReader Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// ======================================================================
//
// Modification History
//		2002-05-24: Remove PVCS header
//		2005-11-30: Add new IDs'Enhanced 
// 	2007-09-17 ubernhard: Add several new ID's
//
// ======================================================================

function StringTable()
{
	Insert(errorID::noError,							"No error."												);
	Insert(errorID::fatalError,						"Fatal error."											);
	Insert(errorID::readError,							"Cannot read barcode."								);
	
	Insert(stringID::userPrompt,						"Cannot read barcode.\n\nPlease enter barcode information:\ne.g. 76281070");
	Insert(stringID::helpFileName,					"HSLBarcodeReaderEnu.chm"							);
	Insert(stringID::inputBoxTitel,					"Read error"											);
	Insert(stringID::messageBoxTitel,				"Read error"											);
	
	Insert(stringID::traceSource,						"SYSTEM"													);
	
	//traceAction
	Insert(stringID::traceActionSetComPort,		"HSLBarcodeReader::SetComPort"					);
	Insert(stringID::traceActionSetTimeout,		"HSLBarcodeReader::SetTimeout"					);
	Insert(stringID::traceActionSetErrorRecovery,"HSLBarcodeReader::SetErrorRecovery"			);
	Insert(stringID::traceActionRead,				"HSLBarcodeReader::Read"							);
	Insert(stringID::traceActionDeleteComBuffer,	"HSLBarcodeReader::DelComBuffer"					);
	Insert(stringID::traceActionSetSimulation,	"HSLBarcodeReader::SetSimulation"				);

	// trace Additional Information
	Insert(stringID::traceAdditionalSetComPort,			" Com port: %s"								);
	Insert(stringID::traceAdditionalSetTimeout,			" Timeout: %s [s]"							);
	Insert(stringID::traceAdditionalSetTimeoutInfinite," Timeout: infinite"							);
	Insert(stringID::traceAdditionalSetErrorRecovery_0," Error recovery: (0) Show error message"		);
	Insert(stringID::traceAdditionalSetErrorRecovery_1," Error recovery: (1) Enter barcode manually");
	Insert(stringID::traceAdditionalSetErrorRecovery_2," Error recovery: (2) Return empty string"	);
	Insert(stringID::traceAdditionalRead,					" Barcode read: %s"							);
	Insert(stringID::traceAdditionalSetSimulation,		" Simulation: %s"								);
	Insert(stringID::traceTextOn,						"On"														);
	Insert(stringID::traceTextOff,					"Off"														);
	
	//traceError
	Insert(stringID::traceErrorInvalidDatatype,	"Invalid datatype"									);
	Insert(stringID::traceErrorInvalidComPort,	"Invalid Com port"										);
	Insert(stringID::traceErrorInvalidArgument,	"Invalid argument"									);
	Insert(stringID::traceErrorReadError,			"Barcode could not be read"						);

	Insert(stringID::traceRecManEnteredBC,			"Barcode '%s1' was manually entered by '%s2'.");
	Insert(stringID::traceRecCancelPressed,		"Manual input of barcode cancelled by '%s'."	);
}
// $$author=wbarmettler$$valid=1$$time=2013-06-24 11:47$$checksum=a7039df7$$length=090$$