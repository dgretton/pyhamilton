// This is a part of the HSL Trace Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2001-06-26  bandenmatten : Removed onerror goto statements from library functions.
// 2001-07-17  bandenmatten : Divided library into interface and implemenation.
// 2002-03-21  bandenmatten : Declared functions TrcGetFileName, TrcGetFunctionName, 
//										TrcGetLineNumber static (are useless in a library).
// 2002-08-23  bandenmatten : Renamed parameter of functions TrcFormatTraceX(): state -> status. 
// 2002-12-05  bandenmatten : Specified return values for exported library functions.
// 2006-02-20  bandenmatten : Function TrcTraceSequence: Enclosed strings in Translate function.

#ifndef __HSLTrcLib_hsl__
#define __HSLTrcLib_hsl__	1

// Interface to Trace library 
#ifndef HSL_RUNTIME
function TrcInputBox(variable& prompt, variable& title, variable type) variable		{return(0);}
function TrcMessageBox(variable& message, variable& title, variable type) variable	{return(0);}
function TrcTrace(variable variable1, variable variable2) void								{return;}
function TrcTrace4(variable variable1, variable variable2, variable variable3, variable variable4) void	{return;}
function TrcTrace8(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void	{return;}
function TrcTrace12(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void	{return;}
function TrcFormatTrace(variable& source, variable& action, variable status, variable variable1, variable variable2) void	{return;}
function TrcFormatTrace4(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4) void	{return;}
function TrcFormatTrace8(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void	{return;}
function TrcFormatTrace12(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void	{return;}
function TrcTraceSequence(sequence& sequenceObj) void											{return;}
function TrcGetMethodFileName() variable															{return(0);}
static function TrcGetFileName() variable															{return(0);}
static function TrcGetFunctionName() variable													{return(0);}
static function TrcGetLineNumber() variable														{return(0);}
#endif

// Implementation of Trace library 
#ifdef HSL_RUNTIME

// Wrapper function  
function TrcInputBox(variable& prompt, variable& title, variable type) variable
{
	return(InputBox(prompt, title, type));
}

// Wrapper function  
function TrcMessageBox(variable& message, variable& title, variable type) variable
{
	return(MessageBox(message, title, type));
}

// Wrapper function  
function TrcTrace(variable variable1, variable variable2) void
{
	Trace(variable1, variable2);
}

// Wrapper function  
function TrcTrace4(variable variable1, variable variable2, variable variable3, variable variable4) void
{
	Trace(variable1, variable2, variable3, variable4);
}

// Wrapper function  
function TrcTrace8(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void
{
	Trace(variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8);
}

// Wrapper function  
function TrcTrace12(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void
{
	Trace(variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9, variable10, variable11, variable12);
}

// Wrapper function  
function TrcFormatTrace(variable& source, variable& action, variable status, variable variable1, variable variable2) void
{
	FormatTrace(source, action, status, variable1, variable2);
}

// Wrapper function  
function TrcFormatTrace4(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4) void
{
	FormatTrace(source, action, status, variable1, variable2, variable3, variable4);
}

// Wrapper function  
function TrcFormatTrace8(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void
{
	FormatTrace(source, action, status, variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8);
}

// Wrapper function  
function TrcFormatTrace12(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void
{
	FormatTrace(source, action, status, variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9, variable10, variable11, variable12);
}

// Traces the attributes of the supplied sequence 
function TrcTraceSequence(sequence& sequenceObj) void
{
	variable currentPosBak;		// backup of current position
	variable countPosBak;		// backup of count position
	variable index;				// loop index
	variable labwareId(Translate("labwareId"));
	variable positionId(Translate("positionId"));

	// backup original current position 
	currentPosBak = sequenceObj.GetCurrentPosition();

	// backup original count position 
	countPosBak = sequenceObj.GetCount();

	// set count to total
	sequenceObj.SetCount(sequenceObj.GetTotal());

	// trace attributes 
	Trace(Translate("name = "), sequenceObj.GetName());
	Trace(Translate("current = "), currentPosBak);
	Trace(Translate("count = "), countPosBak);
	Trace(Translate("total = "), sequenceObj.GetTotal());
	Trace(Translate("max = "), sequenceObj.GetMax());
	Trace(Translate("used = "), sequenceObj.GetUsedPositions());
	for (index = sequenceObj.SetCurrentPosition(1); 
		 index != 0; 
		 index = sequenceObj.Increment(1))
		 Trace(labwareId, " = ", sequenceObj.GetLabwareId(), ", ", positionId, " = ", sequenceObj.GetPositionId());

	// restore original count position
	sequenceObj.SetCount(countPosBak);

	// restore original current position 
	sequenceObj.SetCurrentPosition(currentPosBak);
}

// Wrapper function  
function TrcGetMethodFileName() variable
{
	return(GetMethodFileName());
}

// Wrapper function  
static function TrcGetFileName() variable
{
	return(GetFileName());
}

// Wrapper function  
static function TrcGetFunctionName() variable
{
	return(GetFunctionName());
}

// Wrapper function  
static function TrcGetLineNumber() variable
{
	return(GetLineNumber());
}
#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2013-06-24 11:47$$checksum=d9bba443$$length=090$$