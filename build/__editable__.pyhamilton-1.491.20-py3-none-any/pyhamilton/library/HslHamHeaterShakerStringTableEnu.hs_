// ======================================================================
// This is the language dependant part of the HSLHamHeaterShaker Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
// ======================================================================
//
// do not translate IDS::helpFileName,	"HSLHAMHEATERSHAKERLIB%s.CHM"
//
// ======================================================================

function StringTable()
{
   // Function names
	Insert(IDF::CreateStarDevice,		      	"HSLHamHeaterShakerLib - CreateStarDevice");
	Insert(IDF::CreateUsbDevice,		      	"HSLHamHeaterShakerLib - CreateUsbDevice");
	Insert(IDF::Terminate,					      "HSLHamHeaterShakerLib - Terminate");

	Insert(IDF::StartShaker,					   "HSLHamHeaterShakerLib - StartShaker");
	Insert(IDF::StopShaker,					      "HSLHamHeaterShakerLib - StopShaker");
	Insert(IDF::StartShakerTimed,				   "HSLHamHeaterShakerLib - StartShakerTimed");
	Insert(IDF::WaitForShaker,					   "HSLHamHeaterShakerLib - WaitForShaker");
	Insert(IDF::StartAllShaker,					"HSLHamHeaterShakerLib - StartAllShaker");
	Insert(IDF::StartAllShakerTimed,			   "HSLHamHeaterShakerLib - StartAllShakerTimed");
	Insert(IDF::StopAllShaker,					   "HSLHamHeaterShakerLib - StopAllShaker");
	Insert(IDF::SetShakerParameter,				"HSLHamHeaterShakerLib - SetShakerParameter");
	Insert(IDF::GetShakerParameter,				"HSLHamHeaterShakerLib - GetShakerParameter");
	Insert(IDF::GetShakerSpeed,					"HSLHamHeaterShakerLib - GetShakerSpeed");

	Insert(IDF::StartTempCtrl,					   "HSLHamHeaterShakerLib - StartTempCtrl");
	Insert(IDF::StopTempCtrl,					   "HSLHamHeaterShakerLib - StopTempCtrl");
	Insert(IDF::WaitForTempCtrl,					"HSLHamHeaterShakerLib - WaitForTempCtrl");
	Insert(IDF::GetTemperature,					"HSLHamHeaterShakerLib - GetTemperature");
	Insert(IDF::GetTemperatureState,				"HSLHamHeaterShakerLib - GetTemperatureState");
	Insert(IDF::SetTempParameter,		         "HSLHamHeaterShakerLib - SetTempParameter");
	Insert(IDF::GetTempParameter,		         "HSLHamHeaterShakerLib - GetTempParameter");

	Insert(IDF::SetPlateLock,					   "HSLHamHeaterShakerLib - SetPlateLock");
	Insert(IDF::GetFirmwareVersion,				"HSLHamHeaterShakerLib - GetFirmwareVersion");
	Insert(IDF::GetSerialNumber,					"HSLHamHeaterShakerLib - GetSerialNumber");
	Insert(IDF::BeginMonitoring,					"HSLHamHeaterShakerLib - BeginMonitoring");
	Insert(IDF::EndMonitoring,					   "HSLHamHeaterShakerLib - EndMonitoring");

	Insert(IDF::SendFirmwareCommand,				"HSLHamHeaterShakerLib - SendFirmwareCommand");
	Insert(IDF::SetSimulation,					   "HSLHamHeaterShakerLib - SetSimulation");
	Insert(IDF::SetUSBTrace,						"HSLHamHeaterShakerLib - SetUSBTrace");
	Insert(IDF::Monitoring,							"HSLHamHeaterShakerLib - Monitoring");

	// Error
	Insert(IDE::noError,								"No error.");
	Insert(IDE::retErr,                       "Fatal error");
	Insert(IDE::retNotInitErr,                "Node not initialized");
	Insert(IDE::retNotConnectErr,             "Device not connected");
	Insert(IDE::canError,							"No communication to CAN node.");
	Insert(IDE::eepromError,					   "No communication to EEPROM.");
	Insert(IDE::syntaxCmdError,			      "Unknown command.");
	Insert(IDE::syntaxParUnkError,			   "Unknown parameter.");
	Insert(IDE::syntaxParRangeError,			   "Parameter out of range.");
	Insert(IDE::generalVoltError,					"Voltage outside permitted range.");
	Insert(IDE::generalStopError,					"Stop received.");
	Insert(IDE::generalAddrError,					"Wrong system address.");
	Insert(IDE::parallelError,					   "Parallel commands are not allowed.");
	Insert(IDE::shakerInitError,  		      "Shaker initialization failt.");
	Insert(IDE::shakerNotInitError,		      "Shaker not initialized.");
	Insert(IDE::shakerStepLossError,		      "Shaker step loss.");
	Insert(IDE::shakerStartModeError,         "Shaker is not started with timeout.");
	Insert(IDE::plateLockInitError,  		   "Plate lock initialization failt.");
	Insert(IDE::plateLockNotInitError,		   "Plate lock not initialized.");
	Insert(IDE::plateLockStepLossError,		   "Plate lock step loss.");
	Insert(IDE::tempNotStartError,  		      "Temperature controlling not started.");
	Insert(IDE::tempTimeoutError,			      "Timeout of temperature supervision");
	Insert(IDE::tempSuperRangeError,		      "Temperature out of supervision range.");
	Insert(IDE::tempSecurRangeError,		      "Temperature out of security range.");
	Insert(IDE::tempSensorError,			      "Temperature sensor error");
   Insert(IDE::commandSendTimeout,           "Time out occured on command ='%s'");
   Insert(IDE::unknowFwError,                "Unknow firmware error = '%s'");

   // no firmware errors
	Insert(IDE::noStringValue,				      "Wrong type of parameter; '%s1 ( %s2 )' must be a sting.");
	Insert(IDE::noIntegerValue,				   "Wrong type of parameter; '%s1 ( %s2 )' must be a whole number.");
	Insert(IDE::noDoubleValue,				      "Wrong type of parameter; '%s1 ( %s2 )' must be a whole or decimal number.");
	Insert(IDE::neededNodeNotAvailable,	      "%s1 '%s2' not available.");
   Insert(IDE::unknownResultFormat,          "Unknown format of firmware result string.\r\nExpected: '%s1'.\r\nReceived: '%s2'.");
   Insert(IDE::wrongParameterLength,         "Wrong length of input parameter.\r\nParameter = '%s1' length ( %s2 ).\r\nExpected lenght ( %s3 ).");

	
	// Message
	Insert(IDS::traceSource,						"SYSTEM");
	Insert(IDS::helpFileName,						"HslHamHeaterShakerLib%s.chm");
	Insert(IDS::sendMessageTitle,					"Send message = ");
	Insert(IDS::receiveMessageTitle,				"Received answere = ");
	Insert(IDS::setSimulate,				      "Set simulate mode = ");
	Insert(IDS::starNode,				         "ML_Star node");
	Insert(IDS::usbNode,				            "USB node");
	Insert(IDS::noUsbConnection,				   "No connection to USB device.");
	Insert(IDS::parameterOutOfRange,			   "Parameter out of range; '%s1 ( %s2 )' must be between [%s3..%s4].");
	Insert(IDS::neededNodeNotInitialized,	   "%s1 '%s2' not initialized'.");
	Insert(IDS::setTrace,							"Set USB trace mode = ");
	Insert(IDS::firmwareVersion,					"%s1 '%s2' firmware version = ");
	Insert(IDS::cannotCreateUsbPort,			   "USB communication cannot be created.");
   Insert(IDS::timeoutDuringWaitShaker,      "Time out during wait for end shaking. Shaking will be stop.");
   Insert(IDS::progressSendTo,					"Send command to %s1 ( %s2 ).");
   Insert(IDS::startTimeout,                 "Start time out = ");
   Insert(IDS::toleranceRange,               "Temperature range = ");
   Insert(IDS::securityRange,                "Security range = ");
   Insert(IDS::shakingDirection,             "Shaking direction = ");
   Insert(IDS::shakingSpeed,                 "Shaking speed = ");
   Insert(IDS::shakingAccRamp,               "Shaking acceleration ramp = ");
   Insert(IDS::sendToStar,                   "HSLHamHeaterShakerLib::SendToStar");
   Insert(IDS::sendToUsb,                    "HSLHamHeaterShakerLib::SendToUsb");
   Insert(IDS::invalidStarDevice,          	"Parameter 'starDevice' contains an invalid object.");
   Insert(IDS::invalidDeviceNumber,          "Parameter 'deviceNumber' contains an invalid value! \r\nMust be created with function CreateStarDevice() or CreateUsbDevice()");
   Insert(IDS::maxHHSReached,          		"Cannot create the deviceNumber; Maximal count of usable HHS is reached.");
	Insert(IDS::shakingNotActivated,				"Current HHS module on %s1 '%s2' cannot used as shaker.");
	Insert(IDS::heatingNotActivated,				"Current HHS module on %s1 '%s2' cannot used as heater.");
	Insert(IDS::monitoringShakingTitle,			"Current speed (RPM) = ");
	Insert(IDS::monitoringTempTitle,				"Current temperature = ");
   Insert(IDS::monitoringTempHeatUpTitle,		"Current temperature (heating up mode) = ");
	Insert(IDS::monitoringStateTitle,			"Current monitored state = ");
	Insert(IDS::monitoringWarning,				"Warning: ");
	Insert(IDS::monitoringShNotStart,			"Shaking on %s1 ( %s2 ) not started, check of speed limit will be disabled!");
	Insert(IDS::monitoringHeNotStart,			"Heating up on %s1 ( %s2 ) not started, check of temperature limit will be disabled!");
	Insert(IDS::monitoringAbort,					"Heating or shaking is out of range; Method will be abort!");

}
// $$author=tbenz$$valid=1$$time=2008-10-06 11:12$$checksum=7a0205b2$$length=084$$