// ======================================================================
// This is a part of the HSLHamHeaterShaker Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
// ======================================================================
//
// Modification History
//
//	2008-09-10		tbenz > first creation
//
//	**********************************************************************
// This library version supports following hardware:
//		- HAM Heater Shaker (HHS) ML_STAR interface
//		- HAM Heater Shaker (HHS) USB interface
//	**********************************************************************


#ifndef __HSLHeaterShakerLib_hsl__
#define __HSLHeaterShakerLib_hsl__	1

// Interface to HSLHamHeaterShaker library
#ifndef HSL_RUNTIME


namespace HSLHamHeaterShaker
{
	function CreateStarDevice(			device& starDevice,						// in:  ML_STAR device
												variable usedNode,						// in:  node ID (1 or 2)
												variable& deviceNumber) {}				// out: generated deviceNumber

	function CreateUsbDevice( 			variable usedNode,						// in:  node ID (1..8)
												variable& deviceNumber) {}				// out: generated deviceNumber

	function Terminate()             void {}										// Close the communication

   function StartShaker(            variable deviceNumber,					// in:  assigned deviceNumber
												variable shakingSpeed) {}				// in:  RPM (30..2500)

   function StopShaker(             variable deviceNumber) {}				// in:  assigned deviceNumber

   function StartShakerTimed(       variable deviceNumber,					// in:  assigned deviceNumber
												variable shakingSpeed,					// in   RPM (30..2500)
												variable shakingTime) {}				// in:  time in seconds (1.. 30000)

   function WaitForShaker(          variable deviceNumber) {}				// in:  assigned deviceNumber

   function StartAllShaker(         variable shakingSpeed) {}				// in   RPM (30..2500)

   function StartAllShakerTimed(    variable shakingSpeed,					// in:  RPM (30..2500)
												variable shakingTime) {}				// in:  time in seconds (1.. 30000)

   function StopAllShaker(          ) {}

   function SetShakerParameter(     variable deviceNumber,					// in:  assigned deviceNumber
												variable shakingDirection,				// in:  shaking dirction left / right (0 / 1)
												variable shakingAccRamp) void {}		// in:  Defines the acceleration ramp (rpm²) (integer).

   function GetShakerParameter(     variable deviceNumber,					// in:  assigned deviceNumber
												variable& shakingDirection,			// out: shaking dirction left / right (0 / 1)
												variable& shakingAccRamp) void {}	// out: Defines the acceleration ramp (rpm²) (integer).

	function GetShakerSpeed(     		variable deviceNumber,					// in:  assigned deviceNumber
												variable& shakingSpeed) {}				// out: current RPM


   function StartTempCtrl(          variable deviceNumber,					// in:  assigned deviceNumber
												variable temperature,					// in:  Temperature in 1/10°C. Range 0.0 .. 100.0 (not lower than ambient)
												variable waitForTempReached) {}		// in:  no wait / wait (0 / 1)

   function StopTempCtrl(           variable deviceNumber) {}				// in:  assigned deviceNumber

   function WaitForTempCtrl(        variable deviceNumber) {}				// in:  assigned deviceNumber

   function GetTemperature(         variable deviceNumber,					// in:  assigned deviceNumber
												variable& temperature) {}				// out: current temperature in 1/10°C

   function GetTemperatureState(    variable deviceNumber,					// in:  assigned deviceNumber
												variable& temperatureState) {}		// out: temperature state 0..3
																								//	0 = No error, temperature was always in the defined range.
																								//	1 = Temperature was or is out of temperature range.
																								//	2 = Temperature was out of security range. Temperature controlling is switched off now.
																								//	3 = Temperature time out during start of temperature controlling


   function SetTempParameter(       variable deviceNumber,					// in:  assigned deviceNumber
												variable startTimeout,					// in:  Time before start temperature controlling (1..2500)
												variable toleranceRange,				// in:  Temperature tolerance in 1/10°C. (0.0 .. 100.0), def: 2.0
												variable securityRange) void {}		// in:  Temperature security in 1/10°C. (0.0 .. 100.0), def: 6.0

   function GetTempParameter(       variable deviceNumber,					// in:  assigned deviceNumber
                                    variable& startTimeout,					// out: Time before start temperature controlling.
												variable& toleranceRange,				// out: Temperature tolerance in 1/10°C.
												variable& securityRange) void {}		// out: Temperature security in 1/10°C.


   function SetPlateLock(           variable deviceNumber,					// in:  assigned deviceNumber
												variable plateLock) {}					// in:  unlock / lock (0 / 1)

   function GetFirmwareVersion(		variable deviceNumber,					// in:  assigned deviceNumber
												variable& firmwareVersion) void {}	// out: Firmware version format: "1.0P 1999-03-10"

   function GetSerialNumber(			variable deviceNumber,					// in:  assigned deviceNumber
												variable& serialNumber) void {}		// out: Serial number format: "####" 4 digit number

   function BeginMonitoring(			variable deviceNumber,					// in:  assigned deviceNumber
												variable shakingToleranceRange,		// in:  shaking tolerance
												variable sampleInterval,				// in:  Interval in sec. for check RPM and temperature
												variable action) void {}				// in:  Continue / Abort (0 / 1)
																								// Note: Abort will only called on an error after temperature controlling is activated ()
																								//			An abort will end only the current heater/shaker.
																								// Note:	heaterMin and heaterMax uses the parameter toleranceRange of SetTempParameter()

   function EndMonitoring(				variable deviceNumber,					// in:  assigned deviceNumber
												variable& monitorResult) {}			// out: Monitored result
																								//-1 = monitoring has not started or is not initialized
																								// 0 = all heating and shaking values were within specification
																								// 1 = heating out of range
																								// 2 = shaking out of range
																								// 3 = heating and shaking out of range



   function SendFirmwareCommand(    variable deviceNumber,					// in:  assigned deviceNumber
												variable command,							// in:  Firmware command e.g. "T1RF"
												variable parameter) {}					// in:  Firmware parameter dependent of command

   function SetSimulation(          variable simulate) void {}				// in:  Run / Simulate (0 / 1)

   function SetUSBTrace(				variable trace) void {}					// in:  No trace / trace (0 / 1) Set communication tracing for send and receive message from USB


} // end of namespace HSLHamHeaterShaker

#endif

// ==========================================================================
// Implementation of HSLHamHeaterShaker Library 
// ==========================================================================
#ifdef HSL_RUNTIME
#include "HSLHamHeaterShakerLib.hs_"
#endif

#endif /* end of #ifndef __HSLHamHeaterShakerLib_hsl__ */

// $$author=TBenz$$valid=1$$time=2013-03-06 12:47$$checksum=764d39dc$$length=082$$