
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 5/14/2023 1:36:46 PM

#pragma once
#ifndef HSL_RUNTIME
namespace STAR_OEM_TOOLKIT {
function _InitLibrary() { }
function _ExitLibrary() { }
function Carrier_Load( device & ML_STAR, variable carrierName, variable barcodeFileName, variable barcodeReadPositions, variable & o_stepReturn_CarrierBC, variable & o_stepReturn_PositionsBCs, variable & o_stepReturn_PositionsBCMasks, variable & o_stepReturn_PositionsIDs, variable & o_CarrierBC, variable & o_PositionsBCs[] ) void { }
function Carrier_Unload( device & ML_STAR, variable carrierName, variable & o_stepReturn ) void { }
function Channels_1mL_COREGrippers_Get( device & ML_STAR, sequence & plateSequence, sequence & lidSequence, sequence & toolSequence, variable sequenceCounting, variable transportMode, variable gripForce, variable gripperToolChannel, variable gripWidth, variable gripHeight, variable widthBefore, variable gripSpeed, variable Zspeed, variable checkPlate, variable & o_stepReturn ) void { }
function Channels_1mL_COREGrippers_Move( device & ML_STAR, sequence & destinationSequence, variable xAcceleration, variable & o_stepReturn ) void { }
function Channels_1mL_COREGrippers_Place( device & ML_STAR, sequence & plateSequence, sequence & lidSequence, sequence & toolSequence, variable sequenceCounting, variable transportMode, variable ejectToolWhenFinish, variable Zspeed, variable platePressOnDistance, variable xAcceleration, variable checkPlate, variable & o_stepReturn ) void { }
function Channels_1mL_Dispense( device & ML_STAR, sequence & dispenseSequence, variable & volumeArray[], variable channelVariable, variable liquidClass, variable sequenceCounting, variable channelUse, variable dispenseMode, variable capacitiveLLD, variable liquidFollowing, variable submergeDepth, variable liquidHeight, variable mixCycles, variable mixPosition, variable mixVolume, variable airTransportRetractDist, variable touchOff, variable zMoveAfterStep, variable sideTouch, variable dispPositionAboveTouch, variable & o_stepReturn, variable & o_liquidLevels_mm[], variable & o_liquidLevels_mL[] ) void { }
function Channels_1mL_TipEject( device & ML_STAR, sequence & wasteSequence, variable channelVariable, variable sequenceCounting, variable channelUse, variable useDefaultWaste, variable & o_stepReturn ) void { }
function Channels_1mL_TipPickUp( device & ML_STAR, sequence & tipSequence, variable channelVariable, variable sequenceCounting, variable channelUse, variable & o_stepReturn ) void { }
function Channels_1ml_Aspirate( device & ML_STAR, sequence & aspirateSequence, variable & volumeArray[], variable channelVariable, variable liquidClass, variable sequenceCounting, variable channelUse, variable aspirateMode, variable capacitiveLLD, variable pressureLLD, variable liquidFollowing, variable submergeDepth, variable liquidHeight, variable maxLLdDifference, variable mixCycles, variable mixPosition, variable mixVolume, variable airTransportRetractDist, variable touchOff, variable aspPosAboveTouch, variable & o_stepReturn, variable & o_liquidLevels_mm[], variable & o_liquidLevels_mL[] ) void { }
function Inheco_TEC_Initialize( variable ControllerID, variable SimulationMode ) void { }
function Inheco_TEC_SetTarget( variable ControllerID, variable DeviceID, variable TargetTemperature, variable & ErrorCode ) void { }
function Inheco_TEC_StartTemperatureControl( variable ControllerID, variable DeviceID, variable & ErrorCode ) void { }
function Inheco_TEC_StopTemperatureControl(  ) void { }
function Inheco_TEC_Terminate( variable StopAllDevices ) void { }
function Initialize( device & ML_STAR, variable initializeAlways, variable & o_stepReturn ) void { }
function MPH96_Aspirate( device & ML_STAR, sequence & aspirateSequence, variable aspirateVolume, variable channelVariable, variable liquidClass, variable sequenceCounting, variable aspirateMode, variable capacitiveLLD, variable liquidFollowing, variable submergeDepth, variable liquidHeight, variable mixCycles, variable mixPosition, variable mixVolume, variable airTransportRetractDist, variable & o_stepReturn, variable & o_liquidLevel_mm, variable & o_liquidLevel_mL, variable & o_stepReturn_PositionIDs ) void { }
function MPH96_Dispense( device & ML_STAR, sequence & dispenseSequence, variable dispenseVolume, variable liquidClass, variable sequenceCounting, variable dispenseMode, variable capacitiveLLD, variable liquidFollowing, variable submergeDepth, variable liquidHeight, variable mixCycles, variable mixPosition, variable mixVolume, variable airTransportRetractDist, variable zMoveAfterStep, variable sideTouch, variable & o_stepReturn, variable & o_liquidLevel_mm, variable & o_liquidLevel_mL, variable & o_stepReturn_PositionIDs ) void { }
function MPH96_TipEject( device & ML_STAR, sequence & tipEjectSequence, variable sequenceCounting, variable tipEjectToKnownPosition, variable & o_stepReturn, variable & o_stepReturn_PositionIDs ) void { }
function MPH96_TipPickUp( device & ML_STAR, sequence & tipSequence, variable channelVariable, variable sequenceCounting, variable reducedPatternMode, variable & o_stepReturn, variable & o_stepReturn_PositionIDs ) void { }
function SendFirmwareCommand( variable FirmwareCommand, device & ML_STAR, variable FirmwareParameter, variable & o_stepReturn ) void { }
function TiltModule_Initialize( variable Module, variable Comport, variable TraceLevel, variable Simulate ) void { }
function TiltModule_MoveToPosition( variable Module, variable Position ) void { }
function iSWAP_Get( device & ML_STAR, sequence & plateSequence, sequence & lidSequence, variable sequenceCounting, variable movementType, variable transportMode, variable labwareOrientation, variable gripForce, variable inverseGrip, variable collisionControl, variable gripMode, variable retractDistance, variable liftUpHeight, variable gripWidth, variable tolerance, variable gripHeight, variable widthBefore, variable & o_stepReturn ) void { }
function iSWAP_Move( device & ML_STAR, sequence & destinationSequence, variable collisionControl, variable gripMode, variable & o_stepReturn ) void { }
function iSWAP_Park( device & ML_STAR, variable showCollisionCheckDialog, variable & o_stepReturn ) void { }
function iSWAP_Place( device & ML_STAR, sequence & plateSequence, sequence & lidSequence, variable sequenceCounting, variable movementType, variable transportMode, variable labwareOrientation, variable collisionControl, variable retractDistance, variable liftUpHeight, variable & o_stepReturn ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=stefa$$valid=0$$time=2023-05-14 13:36$$checksum=17b1f0e8$$length=082$$