
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 3/20/2023 9:12:05 AM

#pragma once
#ifndef HSL_RUNTIME
namespace STAR_OEM_TOOLKIT_MPE {
function _InitLibrary() { }
function _ExitLibrary() { }
function MPE2_ClampFilterPlate( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_ClearSourceConfiguration( variable i_intDeviceID, variable i_blnReset, variable & o_stepReturn ) void { }
function MPE2_CollectionPlatePlaced( variable i_intDeviceID, variable i_floatCollectionPlateHeight, variable i_floatOffsetFromNozzles, variable & o_stepReturn ) void { }
function MPE2_CollectionPlateRemoved( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_ConnectUsingCOM( variable i_intComPort, variable i_intBaudRate, variable i_blnSimulationMode, variable i_MpeOptions, variable & o_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_ConnectUsingIP( variable i_strInstrumentName, variable i_intPortNumber, variable i_blnSimulationMode, variable i_MpeOptions, variable & o_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_CustomDispense( variable i_intDeviceID, variable i_intSourceID, variable i_fltWellVolume, variable i_fltFlowRateAspirate, variable i_fltFlowRateDispense, variable i_fltNeedleOffset, variable i_fltEdgeToWellOffset, variable & i_ArrayWellToWellOffset[], variable i_intDelayBetweenAspirateAndDispense, variable i_intDelayBetweenDispense, variable & o_stepReturn ) void { }
function MPE2_Disconnect( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_Dispense( variable i_intDeviceID, variable i_intSourceID, variable i_fltWellVolume, variable i_fltFlowRate, variable i_fltNeedleOffset, variable & o_stepReturn ) void { }
function MPE2_Evaporate( variable i_intDeviceID, variable i_fltPlateHeight, variable i_fltNeedleOffset, variable i_fltWellDepth, variable i_intEvaporateTime, variable & o_stepReturn ) void { }
function MPE2_EvaporateEnd( variable i_intDeviceID, variable i_intTimeOut, variable & o_stepReturn ) void { }
function MPE2_EvaporatePrepare( variable i_intDeviceID, variable i_fltTemperature, variable i_fltPressure, variable i_intTimeOut, variable & o_stepReturn ) void { }
function MPE2_EvaporateWithRate( variable i_intDeviceID, variable i_fltPlateHeight, variable i_fltNeedeOffset, variable i_fltEvaporatorTravelDistance, variable i_intEvaporateTime, variable i_fltFollowRate, variable & o_stepReturn ) void { }
function MPE2_FilterPlatePlaced( variable i_intDeviceID, variable i_fltFilterHeight, variable i_fltNozzleHeight, variable & o_stepReturn ) void { }
function MPE2_FilterPlateRemoved( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_Flush( variable i_intDeviceID, variable i_fltWellVolume, variable i_fltFlowRate, variable i_intWasteContainterID, variable & o_stepReturn ) void { }
function MPE2_GetContainerCalibration( variable i_intDeviceID, variable i_intSourceID, variable & o_fltCapacityVolume, variable & o_intEmptyReading, variable & o_intFullReading, variable & o_strCalibrationDate, variable & o_stepReturn ) void { }
function MPE2_GetCurrentHeaterStatus( variable i_intDeviceID, variable i_blnReset, variable & o_fltCurrentEvapTemperature, variable & o_fltCurrentGasTemp, variable & o_intHeating, variable & o_stepReturn ) void { }
function MPE2_GetHeaterTemperatureRange( variable i_intDeviceID, variable i_blnReset, variable & o_fltMinEvapTemperature, variable & o_fltMaxEvapTemperature, variable & o_fltMinGasTemperature, variable & o_fltMaxGasTemperature, variable & o_fltTargetTemperature, variable & o_intHeating, variable & o_stepReturn ) void { }
function MPE2_GetPressureSensorReadings( variable i_intDeviceID, variable & o_fltInputPressureSensor, variable & o_fltManifoldPressureSensor, variable & o_fltHighPressureSensor, variable & o_fltLowPressureSensor, variable & o_stepReturn ) void { }
function MPE2_GetSourceConfiguration( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_GetTemperatureRange( variable i_intDeviceID, variable & o_fltIMinimumTemperature, variable & o_fltMaximumTemperature, variable & o_stepReturn ) void { }
function MPE2_GetVacuumStatus( variable i_intDeviceID, variable & o_intVacuumActive, variable & o_stepReturn ) void { }
function MPE2_Initialize( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_InitializeWithParameters( variable i_intDeviceID, variable i_blnSmart, variable i_intWasteContainerID, variable i_intVacuumRunTime, variable i_blnDisableVacuumCheck, variable & o_stepReturn ) void { }
function MPE2_MeasureEmptyContainer( variable i_intDeviceID, variable i_intSourceID, variable & o_intSensorReading, variable & o_stepReturn ) void { }
function MPE2_MeasureFullContainer( variable i_intDeviceID, variable i_intSourceID, variable & o_intSensorReading, variable & o_stepReturn ) void { }
function MPE2_Prime( variable i_intDeviceID, variable i_intSourceID, variable i_fltWellVolume, variable i_fltFlowRate, variable i_intWasteContainerID, variable & o_stepReturn ) void { }
function MPE2_ProcessFilterToCollectionPlate( variable i_intDeviceID, variable i_strControlPoints, variable i_blnReturnPlateToIntegrationArea, variable & o_stepReturn ) void { }
function MPE2_ProcessFilterToWasteContainer( variable i_intDeviceID, variable i_strControlPoints, variable i_blnReturnPlateToIntegrationArea, variable i_intWasteContainerID, variable i_blnDisableVacuumCheck, variable & o_stepReturn ) void { }
function MPE2_RetrieveFilterPlate( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_SaveContainerCalibration( variable i_intDeviceID, variable i_intSourceID, variable i_fltVolume, variable & o_stepReturn ) void { }
function MPE2_SetSourceConfiguration( variable i_intDeviceID, variable & o_stepReturn ) void { }
function MPE2_StartContainerCalibration( variable i_intDeviceID, variable i_intSourceID, variable i_fltVolume, variable & o_stepReturn ) void { }
function MPE2_StartVacuum( variable i_intDeviceID, variable i_intWasteContainerID, variable i_blnDisableVacuum, variable & o_stepReturn ) void { }
function MPE2_StopVacuum( variable i_intDeviceID, variable & o_stepReturn ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=stefa$$valid=0$$time=2023-03-20 09:12$$checksum=e411cbdc$$length=082$$